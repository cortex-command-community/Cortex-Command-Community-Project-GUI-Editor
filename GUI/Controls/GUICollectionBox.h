#ifndef _GUICOLLECTIONBOX_
#define _GUICOLLECTIONBOX_

namespace RTE {

/// <summary>
/// A collection box control class that contains child controls.
/// </summary>
class GUICollectionBox : public GUIControl {

public:

    // Drawing type
    enum DrawType {
        Color,
        Image,
        Panel
    };

	GUIControlOverrideMethods;

#pragma region Creation
	/// <summary>
	/// Constructor method used to instantiate a GUICollectionBox object in system memory.
	/// </summary>
	/// <param name="owningManager">GUIControlManager.</param>
	explicit GUICollectionBox(GUIControlManager *owningManager) { m_OwningManager = owningManager; m_IsContainer = true; }

	/// <summary>
	/// Called when the control has been created.
	/// </summary>
	/// <param name="name">Name.</param>
	/// <param name="posX">Position.</param>
	/// <param name="posY"></param>
	/// <param name="width">Size.</param>
	/// <param name="height"></param>
	void Create(const std::string_view &name, int posX, int posY, int width = -1, int height = -1) override {
		GUIControl::Create(name, posX, posY, (width > 0) ? std::max(width, m_MinWidth) : m_DefaultWidth, (height > 0) ? std::max(height, m_MinHeight) : m_DefaultHeight);
	}
#pragma endregion

#pragma region Destruction
	/// <summary>
	/// Destructor method used to clean up this before deletion from memory.
	/// </summary>
	~GUICollectionBox() override;
#pragma endregion


//////////////////////////////////////////////////////////////////////////////////////////
// Method:          Create
//////////////////////////////////////////////////////////////////////////////////////////
// Description:     Called when the control has been created.
// Arguments:       Properties.

    void Create(GUIProperties *Props) override;


//////////////////////////////////////////////////////////////////////////////////////////
// Method:          ChangeSkin
//////////////////////////////////////////////////////////////////////////////////////////
// Description:     Called when the skin has been changed.
// Arguments:       New skin pointer.

    void ChangeSkin(GUISkin *Skin) override;


//////////////////////////////////////////////////////////////////////////////////////////
// Method:          Draw
//////////////////////////////////////////////////////////////////////////////////////////
// Description:     Draws the panel
// Arguments:       Screen class

    void Draw(GUIScreen *Screen) override;


//////////////////////////////////////////////////////////////////////////////////////////
// Method:  OnMouseDown
//////////////////////////////////////////////////////////////////////////////////////////
// Description:     Called when the mouse goes down on the panel
// Arguments:       Mouse Position, Mouse Buttons, Modifier.

	void OnMouseDown(int X, int Y, int Buttons, int Modifier) override { CaptureMouse(); }


//////////////////////////////////////////////////////////////////////////////////////////
// Method:  OnMouseUp
//////////////////////////////////////////////////////////////////////////////////////////
// Description:     Called when the mouse goes up on the panel
// Arguments:       Mouse Position, Mouse Buttons, Modifier.

    void OnMouseUp(int X, int Y, int Buttons, int Modifier) override;


//////////////////////////////////////////////////////////////////////////////////////////
// Method:          OnMouseMove
//////////////////////////////////////////////////////////////////////////////////////////
// Description:     Called when the mouse moves (over the panel, or when captured).
// Arguments:       Mouse Position, Mouse Buttons, Modifier.

	void OnMouseMove(int X, int Y, int Buttons, int Modifier) override { AddEvent(GUIEventType::Notification, GUIEventCode::MouseMove, Buttons); }


//////////////////////////////////////////////////////////////////////////////////////////
// Method:          Move
//////////////////////////////////////////////////////////////////////////////////////////
// Description:     Called when the control needs to be moved.
// Arguments:       New position.

    void Move(int X, int Y) override;


//////////////////////////////////////////////////////////////////////////////////////////
// Method:          Resize
//////////////////////////////////////////////////////////////////////////////////////////
// Description:     Called when the control needs to be resized.
// Arguments:       New size.

    void Resize(int Width, int Height) override;


//////////////////////////////////////////////////////////////////////////////////////////
// Method:          StoreProperties
//////////////////////////////////////////////////////////////////////////////////////////
// Description:     Gets the control to store the values into properties.
// Arguments:       None.

    void StoreProperties() override;


//////////////////////////////////////////////////////////////////////////////////////////
// Method:          SetDrawImage
//////////////////////////////////////////////////////////////////////////////////////////
// Description:     Sets the drawing image bitmap to draw
// Arguments:       Bitmap, ownership IS transferred!

    void SetDrawImage(GUIBitmap *Bitmap);


//////////////////////////////////////////////////////////////////////////////////////////
// Method:          GetDrawImage
//////////////////////////////////////////////////////////////////////////////////////////
// Description:     Gets the drawing image bitmap that is being drawn
// Arguments:       Bitmap, ownership IS NOT transferred!

    GUIBitmap * GetDrawImage() { return m_DrawBitmap.get(); }


//////////////////////////////////////////////////////////////////////////////////////////
// Method:          SetDrawBackground
//////////////////////////////////////////////////////////////////////////////////////////
// Description:     Sets whether to draw the background.
// Arguments:       Draw.

	void SetDrawBackground(bool DrawBack) { m_DrawBackground = DrawBack; }


//////////////////////////////////////////////////////////////////////////////////////////
// Method:          SetDrawType
//////////////////////////////////////////////////////////////////////////////////////////
// Description:     Sets the drawing type.
// Arguments:       Type.

	void SetDrawType(int Type) { m_DrawType = Type; }


//////////////////////////////////////////////////////////////////////////////////////////
// Method:          GetDrawType
//////////////////////////////////////////////////////////////////////////////////////////
// Description:     Gets the current drawing type.
// Arguments:       None.
// Returns:         Type.

    int GetDrawType() const { return m_DrawType; }


//////////////////////////////////////////////////////////////////////////////////////////
// Method:          SetDrawColor
//////////////////////////////////////////////////////////////////////////////////////////
// Description:     Sets the drawing color.
// Arguments:       Color.

	void SetDrawColor(int Color) { m_DrawColor = Color; }


//////////////////////////////////////////////////////////////////////////////////////////
// Method:          GetDrawColor
//////////////////////////////////////////////////////////////////////////////////////////
// Description:     Gets the drawing color.
// Returns:         Color.

    int GetDrawColor() const { return m_DrawColor; }


//////////////////////////////////////////////////////////////////////////////////////////
// Method:          ApplyProperties
//////////////////////////////////////////////////////////////////////////////////////////
// Description:     Applies new properties to the control.
// Arguments:       GUIProperties.

    void ApplyProperties(GUIProperties *Props) override;


private:

	static const std::string_view c_ControlType;

	static constexpr int m_MinWidth = 10;
	static constexpr int m_MinHeight = 10;
	static constexpr int m_DefaultWidth = 100;
	static constexpr int m_DefaultHeight = 100;

	GUIBitmap *m_Background = nullptr;

	bool m_DrawBackground = true;
	int m_DrawType = DrawType::Color;
	int m_DrawColor = 0;

//////////////////////////////////////////////////////////////////////////////////////////
// Method:          BuildBitmap
//////////////////////////////////////////////////////////////////////////////////////////
// Description:     Create the button bitmap to draw.
// Arguments:       None.

    void BuildBitmap();
};
};
#endif