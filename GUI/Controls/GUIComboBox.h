#ifndef _GUICOMBOBOX_
#define _GUICOMBOBOX_

#include "GUITextPanel.h"
#include "GUIListPanel.h"

namespace RTE {



	/// <summary>
	/// A ComboBoxButton control class.
	/// </summary>
	class GUIComboBoxButton : public GUIControl {

	public:

		//////////////////////////////////////////////////////////////////////////////////////////
		// Constructor:     GUIComboBoxButton
		//////////////////////////////////////////////////////////////////////////////////////////
		// Description:     Constructor method used to instantiate a GUIComboBoxButton object in
		//                  system memory.
		// Arguments:       GUIManager.

		GUIComboBoxButton() = default;

		explicit GUIComboBoxButton(GUIControlManager *owningManager) { m_OwningManager = owningManager; }

		~GUIComboBoxButton() override;


		//////////////////////////////////////////////////////////////////////////////////////////
		// Method:          ChangeSkin
		//////////////////////////////////////////////////////////////////////////////////////////
		// Description:     Called when the skin has been changed.
		// Arguments:       New skin pointer.

		void ChangeSkin(GUISkin *Skin);


		//////////////////////////////////////////////////////////////////////////////////////////
		// Method:          Draw
		//////////////////////////////////////////////////////////////////////////////////////////
		// Description:     Draws the panel
		// Arguments:       Screen class

		void Draw(GUIScreen *Screen) override;


		//////////////////////////////////////////////////////////////////////////////////////////
		// Method:          Create
		//////////////////////////////////////////////////////////////////////////////////////////
		// Description:     Create the panel.
		// Arguments:       Position, Size.

		void Create(int X, int Y, int Width, int Height);


		//////////////////////////////////////////////////////////////////////////////////////////
		// Method:          OnMouseDown
		//////////////////////////////////////////////////////////////////////////////////////////
		// Description:     Called when the mouse goes down on the panel
		// Arguments:       Mouse Position, Mouse Buttons, Modifier.

		void OnMouseDown(int X, int Y, int Buttons, int Modifier) override;


		//////////////////////////////////////////////////////////////////////////////////////////
		// Method:          OnMouseUp
		//////////////////////////////////////////////////////////////////////////////////////////
		// Description:     Called when the mouse goes up on the panel
		// Arguments:       Mouse Position, Mouse Buttons, Modifier.

		void OnMouseUp(int X, int Y, int Buttons, int Modifier) override { m_Pushed = false; }


		//////////////////////////////////////////////////////////////////////////////////////////
		// Method:          SetPushed
		//////////////////////////////////////////////////////////////////////////////////////////
		// Description:     Sets the pushed state of the button.
		// Arguments:       Pushed.

		void SetPushed(bool Pushed) { m_Pushed = Pushed; }

	private:

		GUIBitmap *m_DrawBitmap = nullptr;
		bool m_Pushed = false;
	};





/// <summary>
/// A ComboBox control class.
/// </summary>
class GUIComboBox : public GUIControl {

//////////////////////////////////////////////////////////////////////////////////////////
// Public member variable, method and friend function declarations

public:

    // Combo Style
    enum DropDownStyles {
        DropDown,
        DropDownList,
    };

	GUIControlOverrideMethods;

#pragma region Creation
	/// <summary>
	/// Constructor method used to instantiate a GUIComboBox object in system memory.
	/// </summary>
	/// <param name="owningManager">GUIControlManager.</param>
	explicit GUIComboBox(GUIControlManager *owningManager) : m_TextPanel(owningManager), m_ListPanel(owningManager), m_Button(owningManager) { m_OwningManager = owningManager; }

	/// <summary>
	/// Called when the control has been created.
	/// </summary>
	/// <param name="name">Name.</param>
	/// <param name="posX">Position.</param>
	/// <param name="posY"></param>
	/// <param name="width">Size.</param>
	/// <param name="height"></param>
	void Create(const std::string_view &name, int posX, int posY, int width = -1, int height = -1) override;
#pragma endregion

#pragma region Destruction
	/// <summary>
	/// 
	/// </summary>
	~GUIComboBox() override;
#pragma endregion


//////////////////////////////////////////////////////////////////////////////////////////
// Method:          Create
//////////////////////////////////////////////////////////////////////////////////////////
// Description:     Called when the control has been created.
// Arguments:       Properties.

    void Create(GUIProperties *Props) override;


//////////////////////////////////////////////////////////////////////////////////////////
// Method:          Activate
//////////////////////////////////////////////////////////////////////////////////////////
// Description:     Called when the control is activated and ready for use.
// Arguments:       None.

    void Activate() override;


//////////////////////////////////////////////////////////////////////////////////////////
// Method:          ChangeSkin
//////////////////////////////////////////////////////////////////////////////////////////
// Description:     Called when the skin has been changed.
// Arguments:       New skin pointer.

    void ChangeSkin(GUISkin *Skin) override;


//////////////////////////////////////////////////////////////////////////////////////////
// Method:          Draw
//////////////////////////////////////////////////////////////////////////////////////////
// Description:     Draws the panel
// Arguments:       Screen class

    void Draw(GUIScreen *Screen) override;


//////////////////////////////////////////////////////////////////////////////////////////
// Method:          GetListPanel
//////////////////////////////////////////////////////////////////////////////////////////
// Description:     Returns the ListPanel component of the control.
// Arguments:       None.
// Returns:         The ListPanel component of this ComboBox.

    GUIListPanel * GetListPanel() { return &m_ListPanel; }


//////////////////////////////////////////////////////////////////////////////////////////
// Method:          ReceiveSignal
//////////////////////////////////////////////////////////////////////////////////////////
// Description:     Called when receiving a signal.
// Arguments:       Signal source, Signal code, Signal data.

    void ReceiveSignal(GUIControl *Source, GUIEventCode Code, int Data) override;


//////////////////////////////////////////////////////////////////////////////////////////
// Method:          BeginUpdate
//////////////////////////////////////////////////////////////////////////////////////////
// Description:     Locks the control from updating every time a new item is added.
// Arguments:       None.

	void BeginUpdate() { m_ListPanel.BeginUpdate(); }


//////////////////////////////////////////////////////////////////////////////////////////
// Method:          EndUpdate
//////////////////////////////////////////////////////////////////////////////////////////
// Description:     UnLocks the control from updating every time a new item is added.
//                  Will automatically update the control.
// Arguments:       None.

	void EndUpdate() { m_ListPanel.EndUpdate(); }


//////////////////////////////////////////////////////////////////////////////////////////
// Method:          Move
//////////////////////////////////////////////////////////////////////////////////////////
// Description:     Called when the control needs to be moved.
// Arguments:       New position.

    void Move(int X, int Y) override;


//////////////////////////////////////////////////////////////////////////////////////////
// Method:          Resize
//////////////////////////////////////////////////////////////////////////////////////////
// Description:     Called when the control needs to be resized.
// Arguments:       New size.

    void Resize(int Width, int Height) override;


//////////////////////////////////////////////////////////////////////////////////////////
// Method:          AddItem
//////////////////////////////////////////////////////////////////////////////////////////
// Description:     Add an item to the list.
// Arguments:       Name, Extra text, bitmap to show in the list, extra entity data

	void AddItem(const std::string &Name, const std::string &ExtraText = "", GUIBitmap *pBitmap = nullptr, const Entity *pEntity = nullptr) { m_ListPanel.AddItem(Name, ExtraText, pBitmap, pEntity); }


//////////////////////////////////////////////////////////////////////////////////////////
// Method:          DeleteItem
//////////////////////////////////////////////////////////////////////////////////////////
// Description:     Delete an item from the list.
// Arguments:       Item Index.

    void DeleteItem(int Index);


//////////////////////////////////////////////////////////////////////////////////////////
// Method:          ClearList
//////////////////////////////////////////////////////////////////////////////////////////
// Description:     Clears the list.
// Arguments:       None.

    void ClearList();


//////////////////////////////////////////////////////////////////////////////////////////
// Method:          GetCount
//////////////////////////////////////////////////////////////////////////////////////////
// Description:     Get the item count.
// Arguments:       None.

	int GetCount() { return m_ListPanel.GetItemList()->size(); }


//////////////////////////////////////////////////////////////////////////////////////////
// Method:          GetSelectedIndex
//////////////////////////////////////////////////////////////////////////////////////////
// Description:     Get the index of the selected item.
// Arguments:       None.

	int GetSelectedIndex() { return m_ListPanel.GetSelectedIndex(); }


//////////////////////////////////////////////////////////////////////////////////////////
// Method:          GetOldSelectionIndex
//////////////////////////////////////////////////////////////////////////////////////////
// Description:     Get the index of the previously selected item before the selection is
//                  made.
// Arguments:       None.

    int GetOldSelectionIndex() const { return m_OldSelection; }


//////////////////////////////////////////////////////////////////////////////////////////
// Method:          SetSelectedIndex
//////////////////////////////////////////////////////////////////////////////////////////
// Description:     Sets the index of the selected item.
// Arguments:       None.

    void SetSelectedIndex(int Index);


//////////////////////////////////////////////////////////////////////////////////////////
// Method:          RollbackSelection
//////////////////////////////////////////////////////////////////////////////////////////
// Description:     Rolls back the selection to the previous selected item.
// Arguments:       None.
// Returns:         Whether the rollback worked and was performed.

    bool RollbackSelection();


//////////////////////////////////////////////////////////////////////////////////////////
// Method:          GetItem
//////////////////////////////////////////////////////////////////////////////////////////
// Description:     Returns the Item structure at the index.
// Arguments:       Index.
// Returns:         Pointer to the item structure. 0 if the index was invalid.

	GUIListPanel::Item * GetItem(int Index) { return m_ListPanel.GetItem(Index); }


//////////////////////////////////////////////////////////////////////////////////////////
// Method:          GetSelectedItem
//////////////////////////////////////////////////////////////////////////////////////////
// Description:     Returns the Item structure at the currently selected index.
// Arguments:       Index.
// Returns:         Pointer to the item structure. 0 if nothing valid is selected.

    GUIListPanel::Item * GetSelectedItem() { return GetItem(GetSelectedIndex()); }


//////////////////////////////////////////////////////////////////////////////////////////
// Method:          SetDropHeight
//////////////////////////////////////////////////////////////////////////////////////////
// Description:     Sets the drop height of the list.
// Arguments:       Height.

    void SetDropHeight(int Drop);


//////////////////////////////////////////////////////////////////////////////////////////
// Method:          StoreProperties
//////////////////////////////////////////////////////////////////////////////////////////
// Description:     Gets the control to store the values into properties.
// Arguments:       None.

    void StoreProperties() override;


//////////////////////////////////////////////////////////////////////////////////////////
// Method:          SetDropDownStyle
//////////////////////////////////////////////////////////////////////////////////////////
// Description:     Sets the drop down style of the combo box.
// Arguments:       Style.

    void SetDropDownStyle(int Style);


//////////////////////////////////////////////////////////////////////////////////////////
// Method:          GetDropDownStyle
//////////////////////////////////////////////////////////////////////////////////////////
// Description:     Gets the drop down style of the combo box.
// Arguments:       None.

	int GetDropDownStyle() const { return m_DropDownStyle; }


//////////////////////////////////////////////////////////////////////////////////////////
// Method:          GetText
//////////////////////////////////////////////////////////////////////////////////////////
// Description:     Gets text (only if style is DropDown).
// Arguments:       None.
// Returns:         Text. Returns empty string is style is not DropDown.

    std::string GetText();


//////////////////////////////////////////////////////////////////////////////////////////
// Method:          SetText
//////////////////////////////////////////////////////////////////////////////////////////
// Description:     Sets text (only if style is DropDown).
// Arguments:       Text.

    void SetText(const std::string &Text);


//////////////////////////////////////////////////////////////////////////////////////////
// Method:          ApplyProperties
//////////////////////////////////////////////////////////////////////////////////////////
// Description:     Applies new properties to the control.
// Arguments:       GUIProperties.

    void ApplyProperties(GUIProperties *Props) override;


//////////////////////////////////////////////////////////////////////////////////////////
// Method:          IsDropped
//////////////////////////////////////////////////////////////////////////////////////////
// Description:     Shows whether the list is currently dropped down or not.
// Arguments:       None.
// Returns:         Whether this is currently dropped down and showing the list.

    bool IsDropped() { return m_ListPanel.GetVisible(); }

private:

	static const std::string_view c_ControlType;

	static constexpr int m_MinWidth = 30;
	static constexpr int m_MinHeight = 10;
	static constexpr int m_DefaultWidth = 60;
	static constexpr int m_DefaultHeight = 20;

	GUIBitmap *m_DrawBitmap = nullptr;
	int m_OldSelection = 0;
	bool m_CreatedList = false;

	int m_DropHeight = 80;
    int m_DropDownStyle = DropDownStyles::DropDownList;

	GUITextPanel m_TextPanel;
	GUIListPanel m_ListPanel;
	GUIComboBoxButton m_Button;
};
};
#endif